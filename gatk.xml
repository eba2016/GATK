<?xml version="1.0" encoding="utf-8"?>
<tool id="gatk3" name="GATK 3" version="@VERSION@">
  <description>tool collection Version @VERSION@</description>
  <macros>
    <import>gatk_macros.xml</import>
    <import>realigner_target_creator.xml</import>
    <import>indel_realigner.xml</import>
    <import>base_recalibrator.xml</import>
    <import>analyze_covariates.xml</import>
    <import>print_reads.xml</import>
    <import>haplotype_caller.xml</import>
    <import>genotype_gvcfs.xml</import>
    <import>combine_gvcfs.xml</import>
    <import>combine_variants.xml</import>
    <import>variant_filtration.xml</import>
    <import>select_variants.xml</import>
  </macros>
  <stdio>
    <regex match="^INFO" level="log"/>
    <regex match="^WARN" level="warning"/>
    <regex match="Using .* implementation of PairHMM" level="warning"/>
    <regex match="There is insufficient memory for the Java Runtime Environment to continue" level="fatal"/>
    <regex match="^##### ERROR" level="fatal"/>
    <exit_code range="1:" level="fatal"/>
  </stdio>
  <command><![CDATA[
        ############################
        ## import analysis specific preprocessings by using cheetahs internal searchList
        ## if not defined, ignore
        ############################
        #if $analysis_type.analysis_type_selector + "Preprocessing" in vars()['SL'][2]
            #set $analysisPreprocessing = vars()['SL'][2][$analysis_type.analysis_type_selector + "Preprocessing"]
            #include source=$analysisPreprocessing
        #end if
        
        ############################
        ## GATK tool unspecific options
        ############################

        #if $cond_intervals.cond_intervals_enabled
            ############################
            ## create links to interval input file with correct extensions
            ############################
            ln -s -f ${interval} ${interval}.${interval.ext} &&
        #end if

        #if str( $reference_source.reference_source_selector ) == "history"
            ln -s -f ${reference_source.ref_file} ${reference_source.ref_file}.fasta && rm -f ${reference_source.ref_file}.dict && rm -f ${reference_source.ref_file}.fai &&
            java -Xmx12g -jar \$PICARD_PATH CreateSequenceDictionary R= ${reference_source.ref_file}.fasta O= ${reference_source.ref_file}.dict &&
            samtools faidx ${reference_source.ref_file}.fasta &&
        #end if


        @GATK_EXEC@
        
        --analysis_type ${analysis_type.analysis_type_selector}

        #if $reference_source.reference_source_selector != "history"
            --reference_sequence "${reference_source.ref_file.fields.path}"
        #end if

        #if str( $reference_source.reference_source_selector ) == "history"
            --reference_sequence ${reference_source.ref_file}.fasta
        #end if

        --log_to_file           ${output_log}

        #if $cond_intervals.cond_intervals_enabled
            --intervals ${interval}.${interval.ext}
        #end if

        #if $cond_BQSR.cond_BQSR_enabled
          --BQSR $cond_BQSR.BQSR
        #end if

        ############################
        ## import analysis specific options by using cheetahs internal searchList
        ## if not defined throw raw python error until better idea
        ############################
        #if $analysis_type.analysis_type_selector + "Options" in vars()['SL'][2]
            #set $analysisOptions = vars()['SL'][2][$analysis_type.analysis_type_selector + "Options"]
            #include source=$analysisOptions
        #else
            #set $analysisOptions = vars()['SL'][2][$analysis_type.analysis_type_selector + "Options"]
        #end if
        
        ############################
        ## only put ERROR or FATAL log messages into stderr
        ## but keep full log for printing into log file
        ############################
        2>&1 | awk '\$1 != "INFO" && \$1 != "WARN"' >&2
]]></command>
  <inputs>
    <conditional name="reference_source">
      <param name="reference_source_selector" type="select" label="Choose the source for the reference list">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
    <when value="cached">
    <param name="ref_file" type="select" label="Using reference genome" help="-R,‑‑reference_sequence &amp;lt;reference_sequence&amp;gt;">
      <options from_data_table="gatk3_picard_indexes"/>
      <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file"/>
    </param>
    </when>
    <when value="history">
      <param name="ref_file" type="data" format="fasta" label="Using reference file" help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" >
        <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file"/>
      </param>
    </when>
    </conditional>
    <conditional name="cond_intervals">
      <param name="cond_intervals_enabled" type="boolean" checked="true" label="Select interval subset to operate on?"/>
      <when value="true">
        <param name="interval" type="data" format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" title="genomic interval over which to operate" help="-L,‑‑intervals &amp;lt;intervals&amp;gt;" />
      </when>
      <when value="false"/>
    </conditional>
    <conditional name="cond_BQSR">
      <param name="cond_BQSR_enabled" type="boolean" label="Select covariates for on-the-fly recalibration?"/>
      <when value="true">
        <param name="BQSR" type="data" format="tabular" label="Input covariates table file for on-the-fly base quality score recalibration" help="-BQSR,‑‑BQSR &amp;lt;BQSR&amp;gt; intended primarily for use with BaseRecalibrator and PrintReads"/>
      </when>
      <when value="false"/>
    </conditional>
    <conditional name="analysis_type">
      <param name="analysis_type_selector" type="select" label="Analysis Type">
        <option value="RealignerTargetCreator">RealignerTargetCreator</option>
        <option value="IndelRealigner">IndelRealigner</option>
        <option value="BaseRecalibrator">BaseRecalibrator</option>
        <option value="PrintReads">PrintReads</option>
        <option value="AnalyzeCovariates">AnalyzeCovariates</option>
        <option value="HaplotypeCaller">HaplotypeCaller</option>
        <option value="GenotypeGVCFs">GenotypeGVCFs</option>
        <option value="CombineGVCFs">CombineGVCFs</option>
        <option value="CombineVariants">CombineVariants</option>
        <option value="VariantFiltration">VariantFiltration</option>
        <option value="SelectVariants">SelectVariants</option>
      </param>
      <when value="RealignerTargetCreator">
        <expand macro="RealignerTargetCreatorParameters" tag="rtc"/>
      </when>
      <when value="IndelRealigner">
        <expand macro="IndelRealignerParameters" tag="ir"/>
      </when>
      <when value="BaseRecalibrator">
        <expand macro="BaseRecalibratorParameters" tag="br"/>
      </when>
      <when value="AnalyzeCovariates">
        <expand macro="AnalyzeCovariatesParameters" tag="ac"/>
      </when>
      <when value="PrintReads">
        <expand macro="PrintReadsParameters" tag="pr"/>
      </when>
      <when value="HaplotypeCaller">
        <expand macro="HaplotypeCallerParameters" tag="hc"/>
      </when>
      <when value="GenotypeGVCFs">
        <expand macro="GenotypeGVCFsParameters" tag="gg"/>
      </when>
      <when value="CombineGVCFs">
        <expand macro="CombineGVCFsParameters" tag="cg"/>
      </when>
      <when value="CombineVariants">
        <expand macro="CombineVariantsParameters" tag="cv"/>
      </when>
      <when value="VariantFiltration">
        <expand macro="VariantFiltrationParameters" tag="vf"/>
      </when>
      <when value="SelectVariants">
        <expand macro="SelectVariantsParameters" tag="vf"/>
      </when>
    </conditional>
  </inputs>
  <outputs>
    <expand macro="RealignerTargetCreatorOutput" tag="rtc">
      <filter>analysis_type['analysis_type_selector'] == 'RealignerTargetCreator'</filter>
    </expand>
    <expand macro="IndelRealignerOutput" tag="ir">
      <filter>analysis_type['analysis_type_selector'] == 'IndelRealigner'</filter>
    </expand>
    <expand macro="BaseRecalibratorOutput" tag="br">
      <filter>analysis_type['analysis_type_selector'] == 'BaseRecalibrator'</filter>
    </expand>
    <expand macro="AnalyzeCovariatesOutput" tag="ac">
      <filter>analysis_type['analysis_type_selector'] == 'AnalyzeCovariates'</filter>
    </expand>
    <expand macro="PrintReadsOutput" tag="pr">
      <filter>analysis_type['analysis_type_selector'] == 'PrintReads'</filter>
    </expand>
    <expand macro="HaplotypeCallerOutput" tag="hc">
      <filter>analysis_type['analysis_type_selector'] == 'HaplotypeCaller'</filter>
    </expand>
    <expand macro="GenotypeGVCFsOutput" tag="gg">
      <filter>analysis_type['analysis_type_selector'] == 'GenotypeGVCFs'</filter>
    </expand>
    <expand macro="CombineGVCFsOutput" tag="cg">
      <filter>analysis_type['analysis_type_selector'] == 'CombineGVCFs'</filter>
    </expand>
    <expand macro="CombineVariantsOutput" tag="cv">
      <filter>analysis_type['analysis_type_selector'] == 'CombineVariants'</filter>
    </expand>
    <expand macro="VariantFiltrationOutput" tag="vf">
      <filter>analysis_type['analysis_type_selector'] == 'VariantFiltration'</filter>
    </expand>
    <expand macro="SelectVariantsOutput" tag="sv">
      <filter>analysis_type['analysis_type_selector'] == 'SelectVariants'</filter>
    </expand>
    <data format="txt" name="output_log" label="${tool.name} - ${analysis_type.analysis_type_selector} on ${on_string} (log)"/>
  </outputs>
  <expand macro="macro_tests"/>
  <tests>
    <test>
    </test>
    <test>
    </test>
  </tests>
  <help>
<![CDATA[
**What it does**

What is GATK?

Simply what it says on the can: a Toolkit for Genome Analysis

More specifically, it's a toolkit for variant discovery.

The GATK is the industry standard for identifying SNPs and indels in germline DNA and RNAseq data, and its scope is currently being extended to include somatic variant calling tools. In addition to the variant callers themselves, the GATK also includes many utilities to perform related tasks such as processing and quality control of high-throughput sequencing data.

The GATK tools are primarily designed to process exomes and whole genomes generated with Illumina sequencing technology, but they can be adapted to handle a variety of other technologies and experimental designs. And although it was originally developed for human genetics, the GATK has since evolved to handle genome data from any organism, with any level of ploidy.

Web site: https://www.broadinstitute.org/gatk/

------

**Citation**
]]>
  </help>
  <citations>
    <citation type="doi">10.1101/gr.107524.110</citation>
    <citation type="doi">10.1038/ng.806</citation>
    <citation type="doi">10.1002/0471250953.bi1110s43</citation>
  </citations>
</tool>
