<macros>
    <xml name="CombineVariantsParameters" tokens="tag">
        
        <expand macro="macro_vcf_input" tag="@TAG@" />

        <expand macro="macro_optional_parameters">

            <param name="filteredRecordsMergeType" type="select" label="Determines how we should handle records seen at the same site in the VCF, but with different FILTER fields" help="-filteredRecordsMergeType,&#8209;&#8209;filteredrecordsmergetype &amp;lt;filteredrecordsmergetype&amp;gt;">
                <option value="">No Selection</option>
                <option value="KEEP_IF_ANY_UNFILTERED">KEEP_IF_ANY_UNFILTERED</option>
                <option value="KEEP_IF_ALL_UNFILTERED">KEEP_IF_ALL_UNFILTERED</option>
                <option value="KEEP_UNCONDITIONAL" selected="true">KEEP_UNCONDITIONAL</option>
            </param>

            <param name="genotypeMergeOptions" type="select" label="Determines how we should merge genotype records for samples shared across the ROD files" help="-genotypeMergeOptions,&#8209;&#8209;genotypemergeoption &amp;lt;genotypemergeoption&amp;gt;">
                <option value="">No Selection</option>
                <option value="UNIQUIFY" selected="true">UNIQUIFY</option>
                <option value="PRIORITIZE">PRIORITIZE</option>
                <option value="UNSORTED">UNSORTED</option>
                <option value="REQUIRE_UNIQUE">REQUIRE_UNIQUE</option>
            </param>

            <param name="minimumN" type="integer" value="1" optional="true" label="Combine variants and output site only if the variant is present in at least N input files" help="-minN,&#8209;&#8209;minimumN &amp;lt;minimumN&amp;gt;" />

            <param name="assumeIdenticalSamples" type="boolean" truevalue="--assumeIdenticalSamples" falsevalue="" label="If true, assume input VCFs have identical sample sets and disjoint calls" help="-assumeIdenticalSamples,&#8209;&#8209;assumeIdenticalSamples" />

            <param name="excludeNonVariants" type="boolean" truevalue="--excludeNonVariants" falsevalue="" label="Don't include loci found to be non-variant after the combining procedure" help="-env,&#8209;&#8209;excludeNonVariants" />

            <param name="filteredAreUncalled" type="boolean" truevalue="--filteredAreUncalled" falsevalue="" label="If true, then filtered VCFs are treated as uncalled, so that filtered set annotations don't appear in the combined VCF" help="-filteredAreUncalled,&#8209;&#8209;filteredAreUncalled" />

            <param name="minimalVCF" type="boolean" truevalue="--minimalVCF" falsevalue="" label="If true, then the output VCF will contain no INFO or genotype FORMAT fields" help="-minimalVCF,&#8209;&#8209;minimalVCF" />

            <param name="printComplexMerges" type="boolean" truevalue="--printComplexMerges" falsevalue="" label="Print out interesting sites requiring complex compatibility merging" help="-printComplexMerges,&#8209;&#8209;printComplexMerges" />

            <param name="suppressCommandLineHeader" type="boolean" truevalue="--suppressCommandLineHeader" falsevalue="" label="If true, do not output the header containing the command line used" help="-suppressCommandLineHeader,&#8209;&#8209;suppressCommandLineHeader" />

        </expand>

    </xml>

    <xml name="CombineVariantsOutput">
        <data format="vcf" name="cv_output_vcf" label="${tool.name} - ${analysis_type.analysis_type_selector} on ${on_string} (VCF)">
            <yield />
        </data>
    </xml>

    <template name="CombineVariantsPreprocessing">
<![CDATA[
        @token_vcf_input_pre@
]]>
    </template>

    <template name="CombineVariantsOptions">
<![CDATA[
        --out ${cv_output_vcf}

        @token_vcf_input@

        #set $optionals = $analysis_type.optional_parameters
        #if $optionals.optional_parameters_enabled

            #if $optionals.filteredRecordsMergeType
                --filteredrecordsmergetype $optionals.filteredRecordsMergeType
            #end if
            #if $optionals.genotypeMergeOptions
                --genotypemergeoption $optionals.genotypeMergeOptions
            #end if
            #if $optionals.minimumN != 1
                --minimumN $optionals.minimumN
            #end if

            $optionals.assumeIdenticalSamples
            $optionals.excludeNonVariants
            $optionals.filteredAreUncalled
            $optionals.minimalVCF
            $optionals.printComplexMerges
            $optionals.suppressCommandLineHeader

        #end if
]]>
    </template>


</macros>


